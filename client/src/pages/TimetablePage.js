import React, { useContext, useState, useEffect } from 'react';

import Container from 'react-bootstrap/Container';
import Tabs from 'react-bootstrap/Tabs';
import Tab from 'react-bootstrap/Tab';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Button from 'react-bootstrap/Button';
import Toast from 'react-bootstrap/Toast';

import Timetable from '../components/timetable/Timetable';
import CourseOverview from '../components/overviews/CourseOverview';
import IndexEditOverview from '../components/overviews/IndexEditOverview';
import SavedPlansOverview from '../components/overviews/SavedPlansOverview';

import { CurrentPlanContext } from '../contexts/CurrentPlanContext';
import { TimetablePlansContext } from '../contexts/TimetablePlansContext';
import { SavedPlansContext } from '../contexts/SavedPlansContext';
import { CustomisationContext } from '../contexts/CustomisationContext';
import { FirstTimeContext } from '../contexts/FirstTimeContext';

function TimetablePage() {

  const { timetablePlans, setTimetablePlans } = useContext(TimetablePlansContext);
  const { savedPlans } = useContext(SavedPlansContext);
  const { currentPlan, setCurrentPlan } = useContext(CurrentPlanContext);
  const { customOptions } = useContext(CustomisationContext);
  const { firstTime, setFirstTime } = useContext(FirstTimeContext);

  const [currentTab, setCurrentTab] = useState("choose-plan");

  //Toggle showing of tooltip
  const [showTip, setShowTip] = useState(true);
  const toggleShowTip = () => {
    setShowTip(!showTip);
    setFirstTime(false);
  }

  //Left arrow keypress to decrement plan, right arrow keypress to increment plan
  const downHandler = (event) => {
    if (currentTab === "choose-plan"){
      switch(event.key) {
        case "ArrowLeft":
          decreasePlanIndex();
          break;
        case "ArrowRight":
          increasePlanIndex();
          break;
      }
    }
  }

  useEffect(() => {
    window.addEventListener("keydown", downHandler);
    return () => { // Remove event listeners on cleanup
      window.removeEventListener("keydown", downHandler);
    };
  }, [downHandler]); //downHandler in dependency list since we require latest state of currentTab

  // for raising unsaved changes alert when user exits edit plans
  const exitEditPlan = (nextTabKey) => {
    let exit = true;
    if (!timetablePlans.timetables || currentTab !== "edit-plan") { // empty timetable
      setCurrentTab(nextTabKey);
      return exit;
    }
    if (!timetablePlans.timetables.includes(currentPlan)) // tabbing out of edit plans
      exit = window.confirm("Finished editing? Any unsaved changes will be lost.")
    if (!exit) {
      setCurrentTab("edit-plan");
    } else {
      setCurrentTab(nextTabKey);
    }
    return exit;
  }

  //Allows toggling between plan generated by timetable generator or saved plans
  //Called when user clicks on either of the tabs
  const togglePlanToShow = (key) => {
    switch (key) {
      case "edit-plan":
        setCurrentTab("edit-plan");
        break;
      case "choose-plan":
        if (!exitEditPlan("choose-plan")) break;
        if (currentPlan.length !== 0 && timetablePlans.timetables) //Check if current plan is defined alr first
          setCurrentPlan(timetablePlans.timetables[timetablePlans.currentIndex]);
        break;
      case "save-plan":
        if (!exitEditPlan("save-plan")) break;
        if (savedPlans.plans[savedPlans.currentIndex]) //Check if saved plan is defined alr first
          setCurrentPlan(savedPlans.plans[savedPlans.currentIndex]);
        else if (timetablePlans.timetables) {
          setCurrentPlan(timetablePlans.timetables[timetablePlans.currentIndex]); // set back generated plan to avoid showing edited plan
        }
        break;
      default:
        break;
    }
  }

  const decreasePlanIndex = () => {
    if ( timetablePlans.length !== 0 && timetablePlans.currentIndex !== 0){
      setCurrentPlan(timetablePlans.timetables[timetablePlans.currentIndex - 1]);
      setTimetablePlans({...timetablePlans, currentIndex: timetablePlans.currentIndex - 1});
    }
  }

  const increasePlanIndex = () => {
    if (timetablePlans.length !== 0 && timetablePlans.currentIndex !== (timetablePlans.timetables.length - 1)){
      setCurrentPlan(timetablePlans.timetables[timetablePlans.currentIndex + 1]);
      setTimetablePlans({...timetablePlans, currentIndex: timetablePlans.currentIndex + 1});
    }
  }

  return (
    <Container fluid className={`px-0 main ${customOptions.displaySetting}`}>
      <Row className="mx-0 pt-3 align-items-center">
        {currentTab === "choose-plan" ? <>
        <Row className="top-row-toggle">
          <Col xs="auto">
            <Button 
              variant="outline-primary my-1" 
              size="sm"
              onClick={decreasePlanIndex}>
              {'<'}
            </Button>
          </Col>
          <Col xs="auto" className=" font-italic align-plan-text">
              {(Object.entries(timetablePlans).length === 0) ? "Select Courses" : 
              `Plan ${timetablePlans.currentIndex + 1}/${timetablePlans.timetables.length}`}
          </Col>
          <Col xs="auto">
            <Button 
              variant="outline-primary my-1" 
              size="sm"
              onClick={increasePlanIndex}>
              {'>'}
            </Button>
          </Col>
        </Row>
        {(window.innerWidth > 1200) && (Object.entries(timetablePlans).length !== 0) && (firstTime) ?
          <Row className="top-row-toggle">
            <Toast show={showTip} onClose={toggleShowTip}>
              <Toast.Header>
                <strong className="me-auto">Tip: Left/Right arrow keys work too!</strong>
              </Toast.Header>
            </Toast>
          </Row> : null }
        </> : null }   
      </Row>

      <Container fluid className="timetableContainer">
        <Timetable />
      </Container>

      <Container fluid className ="pt-2">
          <Tabs 
          variant="pills"
          activeKey={currentTab}
          id="toggle-course-overview" 
          className="my-3 tabs"
          onSelect={togglePlanToShow}>
            <Tab eventKey="choose-plan" title="Generated Plans">
              <CourseOverview/>
            </Tab>
            <Tab eventKey="edit-plan" title="Edit Current Plan">
              <IndexEditOverview/>
            </Tab>
            <Tab eventKey="save-plan" title="Saved Plans">
              <SavedPlansOverview/>
            </Tab>
          </Tabs>
      </Container>
    </Container>
  );
}

export default TimetablePage;